{"version":3,"sources":["malli/swagger.cljc"],"mappings":";AAMA,AAAA;AAAA;;;8BAAA,9BAAaO;;AAAb,IAAAP,gDAAA,WACYQ,MAAKC,SAASC;AAD1B,AAAA,IAAAT,kBAAA,EAAA,UAAA,OAAA,hBACYO,qBAAAA;IADZN,kBAAA,CAAAC,sBAAA,AAAAC,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,wEAAAA,1BACYM,qDAAAA,/CAAKC,qDAAAA,5CAASC,qDAAAA;;AAD1B,IAAAL,kBAAA,CAAAF,sBAAA;AAAA,AAAA,GAAA,GAAA,CAAAE,mBAAA;AAAA,QAAAA,gDAAAA,wEAAAA,1BACYG,qDAAAA,/CAAKC,qDAAAA,5CAASC,qDAAAA;;AAD1B,MAAA,AAAAJ,2BAAA,wBACYE;;;;AADZ,AAAA;;;wBAAA,xBACGL,wDAASK,MAAKC,SAASC;AAD1B,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,qDAAA,/EACYF,0BAAAA;AADZ,OACYA,kDAAAA,MAAKC,SAASC;;AAD1B,OAAAV,8CACYQ,MAAKC,SAASC;;;;AAD1B,AAGA,GAAA,QAAAC,kCAAAC,0CAAAC;AAAA;AAAA,AAAA,uBAAA,iBAAAC,6BAAA,AAAAC,6CAAA,lHAAUS;IAAVR,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,2CAAA,4DAAA,2FAAA,gEAAA,iBAAAC,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,gBAAA,UAAiB,WAAKE,KAAKC,QAAQC,UAAUC;AAA5B,AAAsCH;GAAvD,mFAAAN,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;;AAEA,AAAAM,kEAAA,mFAAA,WAA6BC,KAAKI,OAAOpB,SAASC;AAAlD,AAA2D,OAACoB,uDAAmBL,KAAKI,OAAOpB,SAASC;;AACpG,AAAAc,kEAAA,AAAA,yDAAA,WAAyBO,EAAEA,MAAEA,MAAEA;AAA/B,AAAA;;AAEA,AAAAP,kEAAA,mDAAA,WAAwBO,EAAEA,MAAEtB,SAASsB;AAArC,AAAA,kDAAA,uDAAgD,AAACC,gBAAMvB;;AAEvD,sBAAA,tBAAMwB,oDAAOC,EAAEzB;AAAf,AACE,IAAA0B,mBAAI,eAAA,WAAAC,1BAACC;AAAD,AAAO,GAAM,gDAAA,hDAACC,uDAAY,AAAA,mFAAAF;AAAnB,AAAAA;;AAAA;;GAED3B;AAFV,AAAA,oBAAA0B;AAAAA;;AAGI,4DAAA,8GAAA,2CAAA,9MAACI,wQAAyCL;;;AAEhD,AAAAV,kEAAA,mDAAA,WAAwBO,EAAEG,EAAEzB,SAASsB;AAArC,AACE,IAAMS,OAAK,AAACP,oBAAMC,EAAEzB;AAApB,AACE,0DAAA,nDAACgC,8CAAMD,iEAAc/B;;AAEzB,AAAAe,kEAAA,gDAAA,WAAuBO,EAAEG,EAAEzB,SAASsB;AAApC,AACE,IAAMS,OAAK,AAACP,oBAAMC,EAAEzB;AAApB,AACE,0DAAA,nDAACgC,8CAAMD,iEAAc/B;;AAEzB,AAAAe,kEAAA,uDAAA,WAA0BO,EAAEG,EAAEzB,SAASsB;AAAvC,AACE,IAAMW,KAAG,AAACC,6CAAKC,eAAKnC;IACd+B,OAAK,AAACP,oBAAMC,EAAEQ;AADpB,AAEE,0DAAA,nDAACD,8CAAMD,iEAAcE;;AAEzB,AAAAlB,kEAAA,uDAAA,wBAAAqB,bAA0Bd,EAAEG,EAAEzB;AAA9B,AAAA,IAAAqC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAA,AAAA1B,4CAAA0B,eAAA,lEAA+CE;UAA/C,AAAA5B,4CAAA0B,eAAA,jEAAoDG;AAApD,AACE,IAAMC,IAAE,yOAAA,4EAAA,nTAAI,EAAK,kDAAA,lDAACC,6CAAEH,0EAAiB,oDAAA,pDAACV,gDAAKW;IACrCT,OAAK,AAACP,oBAAMC,EAAEzB;AADpB,AAEE,4DAAA,rDAACgC,8CAAMD,KAAKU;;AAEhB,AAAA1B,kEAAA,uDAAA,WAA0BO,EAAEA,MAAEtB,SAASsB;AAAvC,AAAA,kDAAA,qDAAA,QAAA,uDAAA,mCAAA,2DAA4EtB;;AAI5E,AAAAe,kEAAA,AAAA,gEAAA,WAA4BO,EAAEA,MAAEA,MAAEA;AAAlC,AAAA,kDAAA,qDAAA,SAAA,0DAAA;;AACA,AAAAP,kEAAA,AAAA,iEAAA,WAA6BO,EAAEA,MAAEA,MAAEA;AAAnC,AAAA,kDAAA,qDAAA,UAAA,0DAAA;;AACA,AAAAP,kEAAA,AAAA,yDAAA,WAAyBO,EAAEA,MAAEA,MAAEA;AAA/B,AAAA,kDAAA,qDAAA,UAAA,0DAAA;;AACA,AAAAP,kEAAA,AAAA,kEAAA,WAA6BO,EAAEA,MAAEA,MAAEA;AAAnC,AAAA,kDAAA,qDAAA,UAAA,0DAAA,QAAA,4DAAA;;AACA,AAAAP,kEAAA,AAAA,kEAAA,WAA6BO,EAAEA,MAAEA,MAAEA;AAAnC,AAAA,kDAAA,qDAAA,UAAA,0DAAA,QAAA,0DAAA;;AACA,AAAAP,kEAAA,AAAA,kEAAA,WAA6BO,EAAEA,MAAEA,MAAEA;AAAnC,AAAA,kDAAA,qDAAA,UAAA,0DAAA,QAAA,4DAAA;;AACA,AAAAP,kEAAA,AAAA,4DAAA,WAA2BO,EAAEA,MAAEA,MAAEA;AAAjC,AAAA,kDAAA,qDAAA,SAAA,0DAAA;;AACA,AAAAP,kEAAA,AAAA,gEAAA,WAA4BO,EAAEA,MAAEA,MAAEA;AAAlC,AAAA,kDAAA,qDAAA,SAAA,0DAAA;;AAEA,AAAAP,kEAAA,oDAAA,WAAwBO,EAAEF,OAAOE,MAAEA;AAAnC,AACE,8GAAA,2CAAA,qDAAA,UAAA,0DAAA,3QAACqB,6XACUvB,pDAAOwB,tBAAa,sBAAA,4DAAA,mFAAA,kDAAA,vNAACC,xBAAyB,ySAAA,2CAAA,kDAAA,4DAAA,iDAAA,nfAACC;;AAE5D,AAAA/B,kEAAA,wDAAA,WAA2BO,EAAEF,OAAOE,MAAEA;AAAtC,AACE,8GAAA,2CAAA,qDAAA,SAAA,0DAAA,1QAACqB,6XACUvB,pDAAOwB,tBAAa,sBAAA,4DAAA,mFAAA,kDAAA,vNAACC,xBAAyB,ySAAA,2CAAA,kDAAA,4DAAA,iDAAA,nfAACC;;AAE5D,gCAAA,hCAAOC,wEAAiB3B,OAAOE,EAAEtB,SAASC;AAA1C,AACE,IAAM+C,IAAE,AAACL,uGAAM,AAACM,yDAAkB7B,QAAQ,AAACwB,oDAAaxB;AAAxD,AACE,IAAAM,mBAAI,8CAAA,9CAACf,4CAAIqC;AAAT,AAAA,oBAAAtB;AAAAA;;AAAA,IAAAA,uBACI,8CAAA,9CAACf,4CAAIqC;AADT,AAAA,oBAAAtB;AAAAA;;AAEI,OAACiB,uGAAM,AAACO,yBAAmBF,GACpB,EAAI,EAAA,GAAA,WAAA,SAAA,EAAA,EAAA,WAAA,CAAAG,gCAAA,wCAAA,KAAA,EAAA,EAAA,4CAAA,AAAAC,sEAAA,QAAA,AAAAA,5CAAYtD,8EAAAA,hRAAcsB,mEAAAA,iDAAAA,0GAAAA,8EAAAA,UAC5B,AAAC1B,sBAAQ0B,OAAOpB,SAASC,SACzB,AAACc,mDAAO,AAACsC,8CAAOjC,QAAQA,OAAOpB,SAASC,UAC1C,0BAAA,1BAACqD,wBAAeN,qEAChB,0BAAA,1BAACM,wBAAeN;;;;AAE/B,2BAAA,3BAAMO,8DAAYC,cAAQvD;AAA1B,AAAmC,OAACwD,8CAAOD,cAAQT,8BAAgB9C;;AAEnE,mCAAA,nCAAMyD,8EACHC;AADH,AAEE,OAACC,6CAAK,AAACC,gBAAMF,GAAG,AAACG,+CAAO,AAACC,6CAAKC,cAAIC,qBAAKC,eAAKP;;AAM9C,AAAA,0BAAA,kCAAAQ,5DAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,sDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,wDAAA,xDAAMD,mEACFb;AADJ,AAEG,2EAAA,pEAACe,sDAAUf;;;AAFd,CAAA,wDAAA,xDAAMa,mEAGFb,cAAQvD;AAHZ,AAIG,IAAMuE,cAAY,6CAAA,7CAAClE;IACbL,cAAQ,+GAAA,2CAAA,6FAAA,KAAA,gHAAA,5WAAC0C,uGAAM1C,yPACmCuE,6GACFjB;IAChDkB,IAAE,AAAClB,yBAAWC,cAAQvD;AAJ5B,AAKE,GAAM,6CAAA,7CAACyC,oDAAS,AAAA,mFAAO+B;AAAvB,AACE,qDAAA,8GAAA,2CAAA,9MAAC3C,wQAAyC,AAAC4C,8CAAOlB,cAAQvD;;AAD5D;;AAEA,IAAA0E,WAAQF;AAAR,AAAA,GAAU,cAAA,AAAAG,dAACC,8BAAKL;AAAa,qDAAAG,SAAA,kEAAA,AAAAC,zHAAC5C,yIAAoBwC;;AAAlDG;;;;AAXL,CAAA,kDAAA,lDAAMN;;AAAN,AAaA,GAAA,QAAAnE,kCAAAC,0CAAA2E;AAAA;AAAA,AAAA,kCAAA,iBAAAzE,6BAAA,AAAAC,6CAAA,7HAAU0E;IAAVzE,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,iBAAAoE,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAlE,kBAAA,AAAAC,+CAAA,gBAAA,qBAA4B,WAAK0B,IAAGlB;AAAR,AAAWkB;GAAvC,4DAAA9B,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;;AAEA,AAAAuE,6EAAA,sDAAA,WAAoC1D,EAAEF;AAAtC,AACE,IAAM6D,iBAAe,6DAAA,2CAAA,kDAAA,sDAAA,qDAAA,rQAACV,sDAAUnD;AAAhC,AAAA,0FAAA,2CAAA,kDAAA,OAAA,gKAAA,yLAAA,2NAAA,/fAEU,AAAA,mGAAA,fAAQ6D,2FACD,AAAA,iHAAA,fAAcA,gFACjB,gDAAA,hDAACpD,uGAAY,AAACwB,8CAAOjC,mEACvB6D;;AAEd,AAAAD,6EAAA,4DAAA,WAAuCxC,IAAGpB;AAA1C,AASE,IAAA8D,aAAoC,uHAAA,2CAAA,sDAAA,qDAAA,7QAACX,sDAAU,AAACc,yDAAkBjE,qGAAaoB;IAA/E0C,iBAAA,AAAA5C,4BAAA4C;iBAAA,AAAAvE,4CAAAuE,eAAA,xEAAcC;eAAd,AAAAxE,4CAAAuE,eAAA,tEAAyBE;AAAzB,AACE,OAAClD,6CACA,WAAAoD;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAM9C;IAANgD,aAAA,AAAAD,4CAAAD,WAAA,IAAA;IAAAE,iBAAA,AAAAnD,4BAAAmD;iBAAAA,bAA0BrE;WAA1B,AAAAT,4CAAA8E,eAAA,lEAAgBlD;AAAhB,AACE,8GAAA,2CAAA,sEAAA,uDAAA,qLAAA,0DAAA,9fAACI,oMACK,AAAC+C,eAAKlD,0DACJC,sEACO,AAAA,6GAAA,XAAcrB,oEACrBmB,kEACI,AAACoD,0BAAU,AAACC,cAAIR,UAAU3C,WACrCrB;GACH+D;;AAEL,GAAA,QAAAjF,kCAAAC,0CAAA0F;AAAA;AAAA,AAAA,uBAAA,iBAAAxF,6BAAA,AAAAC,6CAAA,lHAAUyF;IAAVxF,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,iBAAAmF,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAjF,kBAAA,AAAAC,+CAAA,gBAAA,UAAiB,WAAK2B,EAAEnB,EAAEA,MAAEA;AAAX,AAAcmB;GAA/B,4DAAA/B,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;;AAEA,AAAAsF,kEAAA,yFAAA,WAA+BzE,EAAE0E,EAAEC,IAAI3E;AAAvC,AAAA,kDAAA,+DAEG,AAACsC,6CACA,iBAAAlC,mBAAI,AAAA,6FAAYuE;AAAhB,AAAA,oBAAAvE;AAAAA;;AAAA;;KACA,iBAAAwE,qBAAA,oCAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAxB,cAAAsB;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAC,6BAAAH;AAAA,IAAAI,kBAi1E+C,AAAAmE,sBAAAvE;IAj1E/CK,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,IAAAK,aAAA,AAAAC,eAAAP,gBAAAK;aAAA,AAAApB,4CAAAqB,WAAA,IAAA,pEAAOU;eAAP,AAAA/B,4CAAAqB,WAAA,IAAA,tEAAcW;AAAd,AAAA,AAAA,AAAAT,uBAAAL,SAAA,mFACGa,OAAO,iBAAAE,WAAQD;IAARC,eAAA,kaAAAA,hZACE,AAAA,wFAASD,WAAU,+CAAAC,SAAA,kFAAA,2CAAA,qDAAA,1OAACE,kHAAetD;IADrCoD,eAAA,AAEO,+CAAAA,aAAA,5DAACE,gIAAoB,gEAAA,hEAACC,6CAAKC;;AAFlC,AAAA,AAAA,wCAAAJ,jCAGO/D;;;;AAJjB,eAAA,CAAAkD,WAAA;;;;AAAA;;;;;AAAA,OAAAI,qBAAA,AAAAC,gBAAAP,UAAA,AAAAQ,0BAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAP,UAAA;;;AAAA,IAAAU,aAAA,AAAA7F,gBAAA4E;aAAA,AAAAX,4CAAA4B,WAAA,IAAA,pEAAOG;eAAP,AAAA/B,4CAAA4B,WAAA,IAAA,tEAAcI;AAAd,AAAA,OAAAH,eAAA,mFACGE,OAAO,iBAAAG,WAAQF;IAARE,eAAA,kaAAAA,hZACE,AAAA,wFAASF,WAAU,+CAAAE,SAAA,kFAAA,2CAAA,qDAAA,1OAACC,kHAAetD;IADrCqD,eAAA,AAEO,+CAAAA,aAAA,5DAACC,gIAAoB,gEAAA,hEAACC,6CAAKC;;AAFlC,AAAA,AAAA,wCAAAH,jCAGOhE;;aAJjB,AAAAwD,0BAAA,AAAAI,eAAAnB;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAD,mBAAwBF;;;AAM5B,AAAAD,kEAAA,yFAAA,WAAgCzE,EAAE0E,EAAEC,IAAI3E;AAAxC,AACE,IAAMwG,MAAI,iBAAApG,mBAAI,AAAA,gGAAauE;AAAjB,AAAA,oBAAAvE;AAAAA;;AAAA;;;IACJqG,OAAI,AAACC,sDAAO,WAAAC;AAAA,AAAA,IAAAC,aAAAD;UAAA,AAAAzC,4CAAA0C,WAAA,IAAA,jEAAM1F;WAAN,AAAAgD,4CAAA0C,WAAA,IAAA,lEAASC;AAAT,AAAgB,OAACnD,8DAAkBxC,IAAG2F;qDAAOnC;IACzDoC,SAAO,cAAA,kBAAA,gBAEK,AAACE,+CACA,WAAAC,SAAwBvF,nFAMzBzB,lBACA8G,dACAQ;AARC,AAAA,IAAAL,aAAAD;SAAA,AAAA/C,4CAAAgD,WAAA,IAAA,hEAAMC;YAAN,AAAAjD,4CAAAgD,WAAA,IAAA,nEAASE;cAATF,VAAmBvC;AAAnB,AACE,IAAM0C,IAAE,wBAAA,mFAAA,kDAAA,7JAAC9F,sBAAYG;AAArB,AACE,oBAAI,CAAC0F,sCAAAA,yCAAAA,LAAMC,sBAAAA;AACT1C;;AADF,0FAEG,AAAC2C,6CAAKH,GAAGzF,GAAG,AAAC4F,6CAAKF,MAAMC;;mLAPhC,AAAC/E,6CAAKkE,IAAIC,nEACVM,9JACA,mFAAA,iCAAA,0CAAA;AAJlB,AAAA,kDAAA,kEAceD;;AAEjB,4CAAA,oDAAAU,hGAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAzG,4BAAAyG;QAAAA,JACqCI;iBADrC,AAAAxI,4CAAAoI,eAAA,xEACWE;gBADX,AAAAtI,4CAAAoI,eAAA,vEACsBG;AADtB,AAEE,IAAAE,WAAQD;IAARC,eAAA,kBACEH,YAAW,+CAAAG,SAAA,kEAAA,WAAAC,rIAAC1B;AAAD,AACS,OAACzF,6CAAK,WAAKc;AAAL,AACE,GAAI,4BAAA,5BAAC2C,0BAAU3C;AACb,wDAAA,2EAAA,5HAAC2E,+CAAO3E,4DAAUsG;;AAClBtG;;GAHVqG;IAFtBD;AAAA,AAAA,oBAOEF;AAAU,sDAAAE,aAAA,+DAAA,WAAAG,tIAAC5B;AAAD,AACS,OAAC6B,oBAAU,WAAKC,GAAGhH,EAAEuD;AAAV,AACE,OAAChE,8CAAMyH,GAAGhH,EACH,EAAI,4BAAA,5BAACkD,0BAAUK,8DACb,iDAAA,2EAAA,5HAAC2B,+CAAO3B,4DACAsD,oFACRtD;GALtB,mCAAAuD;;;AARrBH;;;AAgBF,0CAAA,1CAAMM,4FACHP,EAAElJ;AADL,AAEE,IAAM0J,gBAAQ,cAAA,eAAA,mBAAI5D,nBAAO6D,fAAQC,dAAKjE;AAAtC,AACE,OAACkE,sBACA,WAAKX;AAAL,AACE,GAAI,AAACY,qBAAKZ;AACR,OAACK,oBACA,WAAKvD,IAAIxD,EAAEuD;AAAX,AACE,oBAAI,CAAC2D,8CAAAA,iDAAAA,LAAQlH,8BAAAA;AACX,IAAMuH,WAAS,AAACjE,mDAAOtD,EAAEuD,EAAEC,IAAIhG;IACzBgJ,aAAW,AAAA,gGAAae;IACxBd,YAAU,AAAA,6FAAYc;IACtBxF,cAAY,AAACyF,8CAAMC,gBACA,AAACC,oRACKjB,fAAUkB,tNAAK,sNAAA,tNAACC,4CAAI,6CAAA,kEAAA,/GAACtG,2ZACrBkF,tNAAW,AAACoB,4CAAI,6CAAA,kEAAA,/GAACtG;AANhD,AAOE,sPAAIkC,/CAAI,AAACqE,mDAAO7H,1JAAG,AAACE,6JAAMqH,5MACtB,2NAAA,3NAACrC,6RAAoBuC,gBAAM1F,vVAC3BwE;;AACN/C;;GACJkD,MAAEA;;AACHA;;GACJA;;AAEL,AAAA,6BAAA,qCAAAhF,lEAAMqG;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,yDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAlG,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2DAAA,3DAAMkG,sEACFrB;AADJ,AAEG,kEAAA,3DAACsB,yDAAatB;;;AAFjB,CAAA,2DAAA,3DAAMqB,sEAGFrB,EAAElJ;AAHN,AAIG,OAACyJ,wCAA0BP,EAAElJ;;;AAJhC,CAAA,qDAAA,rDAAMuK;;AAAN","names":["malli$swagger$SwaggerSchema$_accept$dyn","x__5350__auto__","m__5351__auto__","malli.swagger/-accept","goog/typeOf","m__5349__auto__","cljs.core/missing-protocol","malli.swagger/SwaggerSchema","this","children","options","js/malli","js/malli.swagger","js/malli.swagger.accept","method-table__5599__auto__","cljs.core.atom","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","cljs.core.get","fexpr__20219","cljs.core/MultiFn","cljs.core.symbol","malli.swagger/accept","name","_schema","_children","_options","schema","malli.json-schema/accept","_","cljs.core/first","malli.swagger/-base","s","or__5002__auto__","p1__20225#","cljs.core/some","cljs.core.not_EQ_","malli.core._fail_BANG_","base","cljs.core.assoc","cs","cljs.core.mapv","cljs.core/last","p__20236","map__20237","cljs.core/--destructure-map","type","in","k","cljs.core._EQ_","cljs.core.merge","malli.core.properties","cljs.core/select-keys","clojure.set/rename-keys","malli.swagger/-swagger-walker","p","malli.core.type_properties","malli.json-schema/select","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","malli.core.type","malli.core/-unlift-keys","malli.swagger/-transform","?schema","malli.core.walk","malli.swagger/-remove-empty-keys","m","cljs.core.into","cljs.core/empty","cljs.core.filter","cljs.core.comp","cljs.core/not","cljs.core/nil?","cljs.core/val","var_args","G__20266","malli.swagger/transform","js/Error","malli.swagger.transform","definitions","t","malli.core.form","G__20268","cljs.core/deref","cljs.core/seq","js/malli.swagger.extract-parameter","fexpr__20273","malli.swagger/extract-parameter","swagger-schema","map__20277","properties","required","malli.core.deref_recursive","p__20278","vec__20282","cljs.core.nth","map__20285","cljs.core/name","cljs.core/contains?","cljs.core/set","js/malli.swagger.expand","fexpr__20289","malli.swagger/expand","v","acc","iter__5480__auto__","s__20291","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__20293","cljs.core/chunk-buffer","i__20292","vec__20295","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__20290","cljs.core/chunk-rest","vec__20300","cljs.core/cons","cljs.core/rest","status","response","G__20299","G__20303","cljs.core.update","cljs.core.fnil","cljs.core/identity","old","new","cljs.core.mapcat","p__20308","vec__20309","spec","merged","cljs.core/reverse","cljs.core.reduce","p__20312","vec__20313","ps","cache","c","cljs.core.conj","cljs.core/vec","p__20320","map__20321","malli.swagger/dissoc-non-root-definitions","parameters","responses","x","G__20322","p1__20318#","cljs.core/dissoc","p1__20319#","cljs.core/reduce-kv","rs","malli.swagger/expand-qualified-keywords","accept?","cljs.core/methods","cljs.core/keys","clojure.walk/postwalk","cljs.core/map?","expanded","cljs.core.apply","cljs.core/merge","cljs.core.concat","cljs.core/vals","cljs.core.map","cljs.core.dissoc","G__20331","malli.swagger/swagger-spec","malli.swagger.swagger_spec","cljs.core/chunk-first"],"sourcesContent":["(ns malli.swagger\n  (:require [clojure.set :as set]\n            [clojure.walk :as walk]\n            [malli.core :as m]\n            [malli.json-schema :as json-schema]))\n\n(defprotocol SwaggerSchema\n  (-accept [this children options] \"transforms schema to Swagger Schema\"))\n\n(defmulti accept (fn [name _schema _children _options] name) :default ::default)\n\n(defmethod accept ::default [name schema children options] (json-schema/accept name schema children options))\n(defmethod accept 'nil? [_ _ _ _] {})\n\n(defmethod accept :not [_ _ children _] {:x-not (first children)})\n\n(defn -base [s children]\n  (or (some #(when (not= \"null\" (:type %))\n               %)\n            children)\n      (m/-fail! ::non-null-base-needed {:schema s})))\n\n(defmethod accept :and [_ s children _]\n  (let [base (-base s children)]\n    (assoc base :x-allOf children)))\n\n(defmethod accept :or [_ s children _]\n  (let [base (-base s children)]\n    (assoc base :x-anyOf children)))\n\n(defmethod accept :multi [_ s children _]\n  (let [cs (mapv last children)\n        base (-base s cs)]\n    (assoc base :x-anyOf cs)))\n\n(defmethod accept :maybe [_ s children {:keys [type in]}]\n  (let [k (if (and (= type :parameter) (not= in :body)) :allowEmptyValue :x-nullable)\n        base (-base s children)]\n    (assoc base k true)))\n\n(defmethod accept :tuple [_ _ children _] {:type \"array\" :items {} :x-items children})\n\n;; Number formats are only defined in Swagger/OpenAPI spec.\n\n(defmethod accept 'number? [_ _ _ _] {:type \"number\" :format \"double\"})\n(defmethod accept 'integer? [_ _ _ _] {:type \"integer\" :format \"int32\"})\n(defmethod accept 'int? [_ _ _ _] {:type \"integer\" :format \"int64\"})\n(defmethod accept 'pos-int? [_ _ _ _] {:type \"integer\", :format \"int64\", :minimum 1})\n(defmethod accept 'neg-int? [_ _ _ _] {:type \"integer\", :format \"int64\", :maximum -1})\n(defmethod accept 'nat-int? [_ _ _ _] {:type \"integer\", :format \"int64\" :minimum 0})\n(defmethod accept 'float? [_ _ _ _] {:type \"number\" :format \"float\"})\n(defmethod accept 'double? [_ _ _ _] {:type \"number\" :format \"double\"})\n\n(defmethod accept :int [_ schema _ _]\n  (merge {:type \"integer\" :format \"int64\"}\n         (-> schema m/properties (select-keys [:min :max]) (set/rename-keys {:min :minimum, :max :maximum}))))\n\n(defmethod accept :double [_ schema _ _]\n  (merge {:type \"number\" :format \"double\"}\n         (-> schema m/properties (select-keys [:min :max]) (set/rename-keys {:min :minimum, :max :maximum}))))\n\n(defn- -swagger-walker [schema _ children options]\n  (let [p (merge (m/type-properties schema) (m/properties schema))]\n    (or (get p :swagger)\n        (get p :json-schema)\n        (merge (json-schema/select p)\n               (if (satisfies? SwaggerSchema schema)\n                 (-accept schema children options)\n                 (accept (m/type schema) schema children options))\n               (m/-unlift-keys p :json-schema)\n               (m/-unlift-keys p :swagger)))))\n\n(defn -transform [?schema options] (m/walk ?schema -swagger-walker options))\n\n(defn -remove-empty-keys\n  [m]\n  (into (empty m) (filter (comp not nil? val) m)))\n\n;;\n;; public api\n;;\n\n(defn transform\n  ([?schema]\n   (transform ?schema nil))\n  ([?schema options]\n   (let [definitions (atom {})\n         options (merge options {::m/walk-entry-vals true\n                                 ::json-schema/definitions definitions\n                                 ::json-schema/transform -transform})\n         t (-transform ?schema options)]\n     (when (= \"null\" (:type t))\n       (m/-fail! ::non-null-base-needed {:schema (m/form ?schema options)}))\n     (cond-> t (seq @definitions) (assoc :definitions @definitions)))))\n\n(defmulti extract-parameter (fn [in _] in))\n\n(defmethod extract-parameter :body [_ schema]\n  (let [swagger-schema (transform schema {:in :body, :type :parameter})]\n    [{:in \"body\"\n      :name (:title swagger-schema \"body\")\n      :description (:description swagger-schema \"\")\n      :required (not= :maybe (m/type schema))\n      :schema swagger-schema}]))\n\n(defmethod extract-parameter :default [in schema]\n  ;; We can't have a $ref on the top level since we are only\n  ;; interested in the properties of the top-level schema.\n  ;; We also can't have a $ref on the second level, because it would\n  ;; mean overwriting the whole {:in i :name k ...} map\n  ;; ($ref replaces the whole object it is in).\n  ;;\n  ;; Until we come up with a usecase for $refs inside non-:body\n  ;; parameters, let's just deref-recursive here.\n  (let [{:keys [properties required]} (transform (m/deref-recursive schema) {:in in, :type :parameter})]\n    (mapv\n     (fn [[k {:keys [type] :as schema}]]\n       (merge\n        {:in (name in)\n         :name k\n         :description (:description schema \"\")\n         :type type\n         :required (contains? (set required) k)}\n        schema))\n     properties)))\n\n(defmulti expand (fn [k _ _ _] k))\n\n(defmethod expand ::responses [_ v acc _]\n  {:responses\n   (into\n    (or (:responses acc) {})\n    (for [[status response] v]\n      [status (cond-> response\n                (:schema response) (update :schema transform {:type :schema})\n                true (update :description (fnil identity \"\"))\n                true -remove-empty-keys)]))})\n\n(defmethod expand ::parameters [_ v acc _]\n  (let [old (or (:parameters acc) [])\n        new (mapcat (fn [[in spec]] (extract-parameter in spec)) v)\n        merged (->> (into old new)\n                    reverse\n                    (reduce\n                     (fn [[ps cache :as acc] p]\n                       (let [c (select-keys p [:in :name])]\n                         (if (cache c)\n                           acc\n                           [(conj ps p) (conj cache c)])))\n                     [[] #{}])\n                    first\n                    reverse\n                    vec)]\n    {:parameters merged}))\n\n(defn dissoc-non-root-definitions\n  [{:keys [parameters responses] :as x}]\n  (cond-> x\n    parameters (update :parameters\n                       #(mapv (fn [p]\n                                (if (contains? p :schema)\n                                  (update p :schema dissoc :definitions)\n                                  p))\n                              %))\n    responses (update :responses\n                      #(reduce-kv (fn [rs k v]\n                                    (assoc rs k\n                                           (if (contains? v :schema)\n                                             (update v :schema\n                                                     dissoc :definitions)\n                                             v)))\n                                  {} %))))\n\n(defn expand-qualified-keywords\n  [x options]\n  (let [accept? (-> expand methods keys set)]\n    (walk/postwalk\n     (fn [x]\n       (if (map? x)\n         (reduce-kv\n          (fn [acc k v]\n            (if (accept? k)\n              (let [expanded (expand k v acc options)\n                    parameters (:parameters expanded)\n                    responses (:responses expanded)\n                    definitions (apply merge\n                                       (concat\n                                        (->> responses vals (map (comp :definitions :schema)))\n                                        (->> parameters (map (comp :definitions :schema)))))]\n                (-> acc (dissoc k) (merge expanded)\n                    (update :definitions merge definitions)\n                    dissoc-non-root-definitions))\n              acc))\n          x x)\n         x))\n     x)))\n\n(defn swagger-spec\n  ([x]\n   (swagger-spec x nil))\n  ([x options]\n   (expand-qualified-keywords x options)))\n"],"x_google_ignoreList":[0]}